i want when click link Streamlit app to automatically analyze a video file already saved on your backend

//--------------this is Upload_File.py
import streamlit as st
import os

# Function: create folder to save uploaded videos
video_dir = "uploaded_videos"
if not os.path.exists(video_dir):
    os.makedirs(video_dir)

# Function: clear the folder
def clear_previous_videos():
    for file in os.listdir(video_dir):
        file_path = os.path.join(video_dir, file)
        if os.path.isfile(file_path):
            os.remove(file_path)

# Define list of interview questions
interview_questions = [
    "Apa yang Anda ketahui tentang Ionic? ",
    "Mengapa Anda memilih menjadi Backend Developer?",
    "Apa pengalaman Anda dengan Node.js? ",
    "Apa tantangan terbesar yang Anda hadapi dalam pengembangan Backend?",
    "Bagaimana Anda mengelola database? ",
    "Bagaimana Anda menangani error dalam aplikasi?",
    "Apa alat yang Anda gunakan untuk pengujian aplikasi? ",
    "Bagaimana Anda bekerja dalam tim? ",
    "Apa yang Anda lakukan untuk menjaga kualitas kode? ",
    "Bagaimana Anda tetap mengikuti perkembangan teknologi? "
]

# UI
st.title("Upload Your Video")

# Question selection
st.subheader("Choose an Interview Question")
question_number = st.selectbox(
    "Select a question number:",
    options=range(1, len(interview_questions) + 1),
    format_func=lambda x: f"Question {x}"
)

# Save the selected question to session state
st.session_state["chosen_question"] = interview_questions[question_number - 1]
st.info(f"Selected Question: {st.session_state['chosen_question']}")

# Video upload
uploaded_video = st.file_uploader("Choose a video file", type=["mp4", "avi", "mov", "mkv"])

if uploaded_video is not None:
    clear_previous_videos() 
    temp_file_path = os.path.join(video_dir, uploaded_video.name)  # Save video to folder

    with open(temp_file_path, "wb") as f:  # Write the uploaded video
        f.write(uploaded_video.read())

    st.video(temp_file_path)
    st.success(f"Video saved successfully at {temp_file_path}!")

    if st.button("Proceed"):
        st.success("Navigating to the next page...")
        st.switch_page("pages/1_Home.py")


//-------------------------this is frontend 

import React, { useEffect, useState } from "react";
import axios from "axios";
import { useParams, Link } from "react-router-dom";

const RecruiterCandidateDetails = () => {
  const { interviewId, candidateId } = useParams();
  const [data, setData] = useState(null);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchDetails = async () => {
      try {
        const res = await axios.get(
          `http://localhost:5000/recruiter/candidate-details/${interviewId}/${candidateId}`,
          { withCredentials: true }
        );
        setData(res.data);
      } catch (err) {
        console.error("Error loading candidate details:", err);
        setError("Failed to load candidate details.");
      }
    };
    fetchDetails();
  }, [interviewId, candidateId]);

  if (error) return <p style={{ color: "red" }}>{error}</p>;
  if (!data) return <p>Loading...</p>;

  const { candidate, response } = data;

  return (
    <div>
      <h2>Candidate Profile</h2>
      <p><strong>Name:</strong> {candidate?.name}</p>
      <p><strong>Email:</strong> {candidate?.email}</p>
      <p><strong>Contact Number:</strong> {candidate?.contactNumber || "Not provided"}</p>
      <p><strong>Role Applied:</strong> {candidate?.roleApplied || "Not specified"}</p>
      <p><strong>Introduction:</strong> {candidate?.introduction || "No introduction provided."}</p>

      <div>
        <strong>Skills:</strong>
        {candidate?.skills && candidate.skills.length > 0 ? (
          <ul>
            {candidate.skills.map((skill, idx) => (
              <li key={idx}>{skill}</li>
            ))}
          </ul>
        ) : (
          <p>No skills listed.</p>
        )}
      </div>

      <div>
        <strong>Education:</strong>
        {candidate?.education && candidate.education.length > 0 ? (
          <ul>
            {candidate.education.map((edu, idx) => (
              <li key={idx}>
                {edu.degree} from {edu.institution} ({edu.yearOfCompletion})
              </li>
            ))}
          </ul>
        ) : (
          <p>No education details provided.</p>
        )}
      </div>

      {response ? (
        <>
          <h3>Submitted Answers</h3>
          <ul>
            {response.answers.map((ans, i) => (
              <li key={i}>
                {ans.startsWith("http") ? (
                  <a href={ans} target="_blank" rel="noreferrer">View File</a>
                ) : (
                  ans
                )}
              </li>
            ))}
          </ul>

          {response.videoMarks?.length > 0 && (
            <>
              <h3>Video Marks</h3>
              <ul>
                {response.videoMarks.map((mark, i) => (
                  <li key={i}>Video {i + 1}: {mark} marks</li>
                ))}
              </ul>
              <p><strong>Average Mark:</strong> {response.marks}</p>
            </>
          )}
        </>
      ) : (
        <p><i>This candidate has not submitted answers yet.</i></p>
      )}

      <br />
      <Link to="/recruiter/interview-results">← Back to Results</Link>
    </div>
  );
};

export default RecruiterCandidateDetails;


//-----------------------this is backend

// ✅ View candidate profile + response details
router.get("/candidate-details/:interviewId/:candidateId", async (req, res) => {
  const { interviewId, candidateId } = req.params;

  try {
    const interview = await Interview.findById(interviewId)
      .populate("responses.candidate", "name email")
      .populate("candidates", "_id"); // we will fetch full candidate info separately

    if (!interview) return res.status(404).json({ message: "Interview not found" });

    const response = interview.responses.find(
      (r) => r.candidate?._id.toString() === candidateId
    );

    // ✅ Find candidate document from Candidate model
    const candidateProfile = await Candidate.findOne({ userId: candidateId }).lean();
    const userProfile = await User.findById(candidateId).lean();

    if (!candidateProfile || !userProfile) {
      return res.status(404).json({ message: "Candidate not found" });
    }

    const fullCandidate = {
      ...userProfile,
      ...candidateProfile
    };

    res.json({
      candidate: fullCandidate,
      response: response || null,
    });
  } catch (error) {
    console.error("❌ Error fetching candidate details:", error.message);
    res.status(500).json({ message: "Error fetching candidate details" });
  }
});